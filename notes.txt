This section is for writing important notes.

# Operators are of four types Assignment , Logical , Comparision and Logical

# Assignment : += , -= , = etc.
# Logical : and or not
# Comparision: == , != , < , > , <= , >= etc.
# Arithmatic : + , - , * , / etc.

--------------------------------------------------------------------------------------------------------------------------

***
String is an immutable data types that stores values in quotes
string slicing = [start : stop : step] (start to stop - 1)

Most used String Functions :

print(str[-4 : -1])

print(str[1 : 4])

print(str.endswith("78"))

print(len(str))    >>> returns number of characters in string

print(str.upper())  >>> uppercase the string

print(str.lower())   >>> lowercase the string

print(str.title())   >>> uppercase first letter of each char in string

print(str.strip())   >>> removes whitespaces 

print(str.split(","))  >>> splits the string based on specified character

print(str.replace("second" , "2nd"))  >>> replace old char wit new char

print(str.find("."))  >>> returns the index of "char"

print(str.find("9"))

print(str.count("E"))  >>> return the count of "char" in string

print(str.isalnum())



ESCAPE SEQUENCE CHARACTERS : 
>> \n = new line
>> \t = tab like space
>> \' \" = add single or double quotes
>> \0 = null character

------------------------------------------------------------------------------------------------------------------------- 
***
PYTHON LISTS: 
Python list are mutable data type i.e. their vaules can be changed
List are containers to store values of any data type
List indexing is same as String indexing
Lists are encllosed in Square Brackets

Some of most used List methods are :

append() - Adds an item to the end of the list.
extend() - Extends the list by appending elements from another iterable.
insert() - Inserts an item at a specified position.
remove() - Removes the first occurrence of a specified value.
pop() - Removes and returns the item at a specified index (default is the last item).
clear() - Removes all items from the list.
index() - Returns the index of the first occurrence of a specified value.
count() - Returns the number of occurrences of a specified value in the list.
sort() - Sorts the list in ascending order by default (can be customized).
reverse() - Reverses the order of the list in place.
copy() - Returns a shallow copy of the list.

----------------------------------------------------------------------------------------------------------------------
***
Python Tuples : Immutable , store any data type values in () 

Tuple Methods : 
count() - Returns the number of times a specified value appears in the tuple.
index() - Returns the index of the first occurrence of a specified value.

Operations on Tuple:
Indexing - Access elements of a tuple using their index.
Slicing - Extract a portion of the tuple using slicing.
Concatenation - Combine two or more tuples into one.
Repetition - Repeat the elements of a tuple multiple times.
Membership - Check if an element exists in a tuple using in.
Iteration - Loop through the elements of a tuple using a for loop.
Length - Find the number of elements in a tuple using len().
Minimum and Maximum - Find the smallest or largest element in a tuple using min() and max().
Sum - Calculate the sum of all numeric elements in a tuple using sum().
Sorting - Sort the elements of a tuple using sorted() (returns a list).
Unpacking - Assign elements of a tuple to variables.
Nesting - Create tuples within tuples.

Most of List and Tuple operations are same except changing in Tuples as Tuples are IMMUTABLE.
 -------------------------------------------------------------------------------------------------------------------

 ***
 Python Dictionary : Mutable , Unordered , Indexed , "Key":Value pairs , each key in Unique , enclosed in {curley braces}

 Dict_Methods : 
 
get() - Returns the value of a specified key.
pop() - Removes the specified key and returns the corresponding value.
popitem() - Removes and returns the last inserted key-value pair.
keys() - Returns a view object containing all the keys.
values() - Returns a view object containing all the values.
items() - Returns a view object containing all key-value pairs as tuples.
clear() - Removes all items from the dictionary.
copy() - Returns a shallow copy of the dictionary.
fromkeys() - Creates a new dictionary with specified keys and a default value.
setdefault() - Returns the value of a key. If the key does not exist, it adds the key with a specified default value.
update() - Updates the dictionary with elements from another dictionary or iterable.

Operations on Dictionary : 

Adding Items - Add a key-value pair to the dictionary.
Updating Values - Modify the value of an existing key.
Accessing Items - Access the value of a key using dict[key] or get().
Removing Items - Remove key-value pairs using pop() or popitem().
Checking Membership - Check if a key exists in the dictionary using in.
Iterating Keys - Loop through all keys in the dictionary using for key in dict.keys().
Iterating Values - Loop through all values in the dictionary using for value in dict.values().
Iterating Key-Value Pairs - Loop through all key-value pairs using for key, value in dict.items().
Clearing Dictionary - Remove all items using clear().
Copying Dictionary - Create a copy of the dictionary using copy().
Merging Dictionaries - Merge two dictionaries using update().
 
 ---------------------------------------------------------------------------------------------------------------
***
Python Sets :A set in Python is an unordered, mutable, and iterable collection of unique elements. 
It is defined using curly braces {} or the set() constructor. 
Sets are useful for operations involving membership testing, removing duplicates, and performing 
mathematical set operations like union, intersection, difference, etc.

Set Methods : 
add() - Adds an element to the set.
remove() - Removes a specific element from the set (raises an error if not found).
discard() - Removes a specific element from the set (does not raise an error if not found).
pop() - Removes and returns an arbitrary element from the set.
clear() - Removes all elements from the set.
copy() - Returns a shallow copy of the set.
union() - Returns a new set containing all unique elements from both sets.
intersection() - Returns a new set containing elements common to both sets.
difference() - Returns a new set containing elements in the first set but not in the second.
symmetric_difference() - Returns a new set containing elements in either of the sets but not in both.
update() - Updates the set with elements from another set or iterable.
intersection_update() - Updates the set to keep only elements found in it and another set.
difference_update() - Updates the set by removing elements found in another set.
symmetric_difference_update() - Updates the set to include elements in either set but not in both.
isdisjoint() - Returns True if two sets have no elements in common.
issubset() - Returns True if the set is a subset of another set.
issuperset() - Returns True if the set is a superset of another set.

Set Operations : 
Adding Elements - Add elements using add() or update().
Removing Elements - Remove elements using remove(), discard(), or pop().
Union - Combine elements of two sets using | or union().
Intersection - Find common elements between sets using & or intersection().
Difference - Find elements in one set but not in the other using - or difference().
Symmetric Difference - Find elements in either set but not both using ^ or symmetric_difference().
Membership Test - Check if an element exists in a set using in.
Iterating - Loop through the elements of a set using a for loop.
Clearing Set - Remove all elements using clear().
Copying Set - Create a copy of the set using copy().
Subset Test - Check if a set is a subset of another using issubset().
Superset Test - Check if a set is a superset of another using issuperset().
Disjoint Test - Check if two sets have no common elements using isdisjoint().

--------------------------------------------------------------------------------------------------------------
Function : A Functionis a set of statements used to perform a specific task. Two types:
    Built-in Functions -> Pre defined in Python e.g. print , len , range etc.
    User Defined -> Created by User to ease tasks

Recurssion : When a function call itself repeatedly

----------------------------------------------------------------------------------------------------------------
***
File Handling in Python :
    1. Basic File Operations
    Opening and Closing Files:
        open(), close()
    File modes: r (read), w (write), a (append), r+ (read/write)
    Reading from Files:
        read(): Read the entire file.
        readline(): Read a single line.
        readlines(): Read all lines into a list.

    Handling large files with buffered reading.
    Writing to Files:
        write(): Write string to file.
        writelines(): Write a list of strings to a file.
    
    File Positioning:
        seek(): Move file pointer to a specific position.
        tell(): Get the current file pointer position.

    Context Management:
    Use with open() as f: for automatic file closing.


    2. File Path and Directory Management
    Manipulating File Paths:
        os.path.join(), os.path.exists(), os.remove()
        Pathlib module (modern, Pythonic way to handle paths).

    Directory Operations:
        os.makedirs(): Create directories.
        os.listdir(): List files in a directory.

    File Permission Management:
        os.chmod(): Change file permissions.


    3. Working with Different File Formats
    Text Files:
        Basic operations (read, write, append).
    
    CSV Files:
        Use csv module for reading and writing CSV files.
    
    JSON Files:
        Use json module to handle JSON data (e.g., configuration files).
    
    YAML Files:
        Use pyyaml module for working with YAML files (commonly used in DevOps for configurations like Docker, Kubernetes, Ansible).


    4. File Handling in Automation
    Log File Management:
        Automate log file rotation, archival, and compression.
        Parse logs for specific patterns or errors.
        Schedule log backups and automate log analysis.
    
    Backup Scripts:
        Automate file backups (e.g., system configurations).
        Use scheduling tools (like cron) to run backup scripts.


    5. File Handling with External Systems
    Cloud Interactions:
        Use Python to interact with cloud services (e.g., AWS S3, Google Cloud Storage).
        Example: boto3 for AWS.
    
    Interacting with APIs:
        Use Python to interact with REST APIs and store data in files (JSON, CSV).


    6. Security Considerations
    Handling Sensitive Data:
        Use encryption to secure sensitive data (e.g., API keys, passwords).
        Libraries: cryptography, pycryptodome.
    
    Secure File Management:
        Store sensitive configuration files securely.
        Encrypt and decrypt data as necessary.


